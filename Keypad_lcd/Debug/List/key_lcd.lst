
AVRASM ver. 2.1.30  D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm Tue Dec 19 22:20:22 2023

D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1417): warning: Register r4 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1418): warning: Register r5 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1419): warning: Register r7 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1420): warning: Register r6 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1421): warning: Register r9 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1422): warning: Register r8 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1423): warning: Register r11 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1424): warning: Register r10 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1425): warning: Register r13 already defined by the .DEF directive
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1426): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _x1=R4
                 	.DEF _x1_msb=R5
                 	.DEF _i=R7
                 	.DEF _j=R6
                 	.DEF _userID=R9
                 	.DEF _passCode=R8
                 	.DEF _newPassCode=R11
                 	.DEF _renterPassCode=R10
                 	.DEF _IDAdmin=R13
                 	.DEF _ID2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00f5 	JMP  __RESET
000002 940c 02af 	JMP  _ext0
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 6fde      	.DB  0xDE,0x6F
                 
                 _0x3:
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1470): warning: .cseg .db misalignment - padding zero byte
000038 004d      	.DB  0x4D
                 _0x4:
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1472): warning: .cseg .db misalignment - padding zero byte
000039 00bc      	.DB  0xBC
                 _0x5:
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1474): warning: .cseg .db misalignment - padding zero byte
00003a 006f      	.DB  0x6F
                 _0x6:
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1476): warning: .cseg .db misalignment - padding zero byte
00003b 00de      	.DB  0xDE
                 _0x7:
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1478): warning: .cseg .db misalignment - padding zero byte
00003c 004d      	.DB  0x4D
                 _0x8:
D:\Studies\FCI\level 4\First Term\Embedded Systems\project\Keypad_lcd\Debug\List\key_lcd.asm(1480): warning: .cseg .db misalignment - padding zero byte
00003d 00bc      	.DB  0xBC
                 _0x0:
00003e 6f54
00003f 4f20
000040 6570
000041 206e      	.DB  0x54,0x6F,0x20,0x4F,0x70,0x65,0x6E,0x20
000042 6874
000043 2065
000044 6f44
000045 726f      	.DB  0x74,0x68,0x65,0x20,0x44,0x6F,0x6F,0x72
000046 4320
000047 696c
000048 6b63
000049 2a20      	.DB  0x20,0x43,0x6C,0x69,0x63,0x6B,0x20,0x2A
00004a 0020
00004b 6e45
00004c 6574
00004d 2072      	.DB  0x20,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
00004e 6f79
00004f 7275
000050 4920
000051 2044      	.DB  0x79,0x6F,0x75,0x72,0x20,0x49,0x44,0x20
000052 2020
000053 0020
000054 6425
000055 4500      	.DB  0x20,0x20,0x20,0x0,0x25,0x64,0x0,0x45
000056 746e
000057 7265
000058 7920
000059 756f      	.DB  0x6E,0x74,0x65,0x72,0x20,0x79,0x6F,0x75
00005a 2072
00005b 6150
00005c 7373
00005d 4320      	.DB  0x72,0x20,0x50,0x61,0x73,0x73,0x20,0x43
00005e 646f
00005f 2065
000060 2a00
000061 5300      	.DB  0x6F,0x64,0x65,0x20,0x0,0x2A,0x0,0x53
000062 726f
000063 7972
000064 202c
000065 7257      	.DB  0x6F,0x72,0x72,0x79,0x2C,0x20,0x57,0x72
000066 6e6f
000067 2067
000068 4350
000069 0020      	.DB  0x6F,0x6E,0x67,0x20,0x50,0x43,0x20,0x0
00006a 7257
00006b 6e6f
00006c 2067
00006d 4449      	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x49,0x44
00006e 0020
00006f 6e45
000070 6574
000071 2072      	.DB  0x20,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
000072 6874
000073 2065
000074 6c4f
000075 2064      	.DB  0x74,0x68,0x65,0x20,0x4F,0x6C,0x64,0x20
000076 4350
000077 0020
000078 6e45
000079 6574      	.DB  0x50,0x43,0x20,0x0,0x45,0x6E,0x74,0x65
00007a 2072
00007b 6874
00007c 2065
00007d 654e      	.DB  0x72,0x20,0x74,0x68,0x65,0x20,0x4E,0x65
00007e 2077
00007f 4350
000080 0020
000081 6552      	.DB  0x77,0x20,0x50,0x43,0x20,0x0,0x52,0x65
000082 746e
000083 7265
000084 7420
000085 6568      	.DB  0x6E,0x74,0x65,0x72,0x20,0x74,0x68,0x65
000086 4e20
000087 7765
000088 5020
000089 2043      	.DB  0x20,0x4E,0x65,0x77,0x20,0x50,0x43,0x20
00008a 4e00
00008b 7765
00008c 5020
00008d 2043      	.DB  0x0,0x4E,0x65,0x77,0x20,0x50,0x43,0x20
00008e 7369
00008f 5320
000090 6f74
000091 6572      	.DB  0x69,0x73,0x20,0x53,0x74,0x6F,0x72,0x65
000092 0064
000093 6f43
000094 746e
000095 6361      	.DB  0x64,0x0,0x43,0x6F,0x6E,0x74,0x61,0x63
000096 2074
000097 6441
000098 696d
000099 206e      	.DB  0x74,0x20,0x41,0x64,0x6D,0x69,0x6E,0x20
00009a 5700
00009b 6f72
00009c 676e
00009d 5020      	.DB  0x0,0x57,0x72,0x6F,0x6E,0x67,0x20,0x50
00009e 2c43
00009f 6f43
0000a0 746e
0000a1 6361      	.DB  0x43,0x2C,0x43,0x6F,0x6E,0x74,0x61,0x63
0000a2 2074
0000a3 6441
0000a4 696d
0000a5 206e      	.DB  0x74,0x20,0x41,0x64,0x6D,0x69,0x6E,0x20
0000a6 5700
0000a7 6f72
0000a8 676e
0000a9 4920      	.DB  0x0,0x57,0x72,0x6F,0x6E,0x67,0x20,0x49
0000aa 2c44
0000ab 6f43
0000ac 746e
0000ad 6361      	.DB  0x44,0x2C,0x43,0x6F,0x6E,0x74,0x61,0x63
0000ae 2074
0000af 6441
0000b0 696d
0000b1 206e      	.DB  0x74,0x20,0x41,0x64,0x6D,0x69,0x6E,0x20
0000b2 5700
0000b3 6c65
0000b4 6f63
0000b5 656d      	.DB  0x0,0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65
0000b6 202c
0000b7 6441
0000b8 696d
0000b9 206e      	.DB  0x2C,0x20,0x41,0x64,0x6D,0x69,0x6E,0x20
0000ba 5700
0000bb 6c65
0000bc 6f63
0000bd 656d      	.DB  0x0,0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65
0000be 202c
0000bf 7453
0000c0 6475
0000c1 6e65      	.DB  0x2C,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
0000c2 2074
0000c3 4100
0000c4 6d68
0000c5 6465      	.DB  0x74,0x20,0x0,0x41,0x68,0x6D,0x65,0x64
0000c6 0020
0000c7 6f4d
0000c8 6168
0000c9 656d      	.DB  0x20,0x0,0x4D,0x6F,0x68,0x61,0x6D,0x65
0000ca 2064
0000cb 4d00
0000cc 6861
0000cd 6f6d      	.DB  0x64,0x20,0x0,0x4D,0x61,0x68,0x6D,0x6F
0000ce 6475
0000cf 0020
0000d0 6e45
0000d1 6574      	.DB  0x75,0x64,0x20,0x0,0x45,0x6E,0x74,0x65
0000d2 2072
0000d3 6441
0000d4 696d
0000d5 206e      	.DB  0x72,0x20,0x41,0x64,0x6D,0x69,0x6E,0x20
0000d6 6150
0000d7 7373
0000d8 4320
0000d9 646f      	.DB  0x50,0x61,0x73,0x73,0x20,0x43,0x6F,0x64
0000da 2065
0000db 4500
0000dc 746e
0000dd 7265      	.DB  0x65,0x20,0x0,0x45,0x6E,0x74,0x65,0x72
0000de 5320
0000df 7574
0000e0 6564
0000e1 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000e2 4920
0000e3 2044
0000e4 2020
0000e5 0020      	.DB  0x20,0x49,0x44,0x20,0x20,0x20,0x20,0x0
0000e6 6f43
0000e7 746e
0000e8 6361
0000e9 2074      	.DB  0x43,0x6F,0x6E,0x74,0x61,0x63,0x74,0x20
0000ea 6441
0000eb 696d
0000ec 006e      	.DB  0x41,0x64,0x6D,0x69,0x6E,0x0
                 _0x2000003:
0000ed c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000ee 000a      	.DW  0x0A
0000ef 0004      	.DW  0x04
0000f0 0066      	.DW  __REG_VARS*2
                 
0000f1 0002      	.DW  0x02
0000f2 0162      	.DW  __base_y_G100
0000f3 01da      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000f4 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000f5 94f8      	CLI
0000f6 27ee      	CLR  R30
0000f7 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000f8 e0f1      	LDI  R31,1
0000f9 bffb      	OUT  GICR,R31
0000fa bfeb      	OUT  GICR,R30
0000fb bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000fc e08d      	LDI  R24,(14-2)+1
0000fd e0a2      	LDI  R26,2
0000fe 27bb      	CLR  R27
                 __CLEAR_REG:
0000ff 93ed      	ST   X+,R30
000100 958a      	DEC  R24
000101 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000102 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000103 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000104 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000105 93ed      	ST   X+,R30
000106 9701      	SBIW R24,1
000107 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000108 edec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000109 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00010a 9185      	LPM  R24,Z+
00010b 9195      	LPM  R25,Z+
00010c 9700      	SBIW R24,0
00010d f061      	BREQ __GLOBAL_INI_END
00010e 91a5      	LPM  R26,Z+
00010f 91b5      	LPM  R27,Z+
000110 9005      	LPM  R0,Z+
000111 9015      	LPM  R1,Z+
000112 01bf      	MOVW R22,R30
000113 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000114 9005      	LPM  R0,Z+
000115 920d      	ST   X+,R0
000116 9701      	SBIW R24,1
000117 f7e1      	BRNE __GLOBAL_INI_LOOP
000118 01fb      	MOVW R30,R22
000119 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00011a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00011b bfed      	OUT  SPL,R30
00011c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00011d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00011e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00011f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000120 940c 0122 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;char get_address_id(char ID);
                 ;char get_address_pc(char PC);
                 ;void Welcome_Display(char userID);
                 ;void peep();
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 002E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002F int x1 = 0;
                 ; 0000 0030 //int x2 = 0;
                 ; 0000 0031 DDRC = 0b00000111;
                 ;	x1 -> R16,R17
                +
000122 e000     +LDI R16 , LOW ( 0 )
000123 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000124 e0e7      	LDI  R30,LOW(7)
000125 bbe4      	OUT  0x14,R30
                 ; 0000 0032 PORTC = 0b11111000;
000126 efe8      	LDI  R30,LOW(248)
000127 bbe5      	OUT  0x15,R30
                 ; 0000 0033 lcd_init(16);
000128 e1a0      	LDI  R26,LOW(16)
000129 d252      	RCALL _lcd_init
                 ; 0000 0034 lcd_clear();
00012a d227      	RCALL _lcd_clear
                 ; 0000 0035 
                 ; 0000 0036 // store IDs and PCs in the EEPROM  run it atleast one time
                 ; 0000 0037 //       EE_Write(1,IDAdmin);
                 ; 0000 0038 //       EE_Write(2,PCAdmin);
                 ; 0000 0039 //       EE_Write(3,ID2);
                 ; 0000 003A //       EE_Write(4,PC2);
                 ; 0000 003B //       EE_Write(5,ID3);
                 ; 0000 003C //       EE_Write(6,PC3);
                 ; 0000 003D //       EE_Write(7,ID4);
                 ; 0000 003E //       EE_Write(8,PC4);
                 ; 0000 003F 
                 ; 0000 0040 
                 ; 0000 0041 //////////////////////////////////////////////////////////
                 ; 0000 0042 // first way :
                 ; 0000 0043 //MCUCR |= (1<<1);
                 ; 0000 0044 // another and better way :
                 ; 0000 0045 bit_set(MCUCR,1); // the same as first way
00012b b7e5      	IN   R30,0x35
00012c 60e2      	ORI  R30,2
00012d bfe5      	OUT  0x35,R30
                 ; 0000 0046 bit_clr(MCUCR,0); // MCUCR &= ~(1<<0);
00012e b7e5      	IN   R30,0x35
00012f 7fee      	ANDI R30,0xFE
000130 bfe5      	OUT  0x35,R30
                 ; 0000 0047 
                 ; 0000 0048 // way to enable global interrupt :
                 ; 0000 0049 #asm("sei") // SREG.7 = 1
000131 9478      	SEI
                 ; 0000 004A 
                 ; 0000 004B // way to enable EXT0 specific :
                 ; 0000 004C bit_set(GICR,6);
000132 b7eb      	IN   R30,0x3B
000133 64e0      	ORI  R30,0x40
000134 bfeb      	OUT  0x3B,R30
                 ; 0000 004D ///////////////////////////////////////////////////////
                 ; 0000 004E 
                 ; 0000 004F DDRB.0 = 1;      // output
000135 9ab8      	SBI  0x17,0
                 ; 0000 0050 
                 ; 0000 0051 while (1)
                 _0xB:
                 ; 0000 0052 {
                 ; 0000 0053 lcd_clear();
000136 d21b      	RCALL _lcd_clear
                 ; 0000 0054 lcd_printf("To Open the Door Click * ");
                +
000137 e7ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000138 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000139 d3e4      	RCALL SUBOPT_0x0
                 ; 0000 0055 x1 = keypad();
00013a d0b1      	RCALL _keypad
00013b 2f0e      	MOV  R16,R30
00013c 2711      	CLR  R17
                 ; 0000 0056 if (x1 == 10) {
00013d e0ea      	LDI  R30,LOW(10)
00013e e0f0      	LDI  R31,HIGH(10)
00013f 17e0      	CP   R30,R16
000140 07f1      	CPC  R31,R17
000141 f5f1      	BRNE _0xE
                 ; 0000 0057 int x1=0;
                 ; 0000 0058 lcd_clear();
000142 d3e1      	RCALL SUBOPT_0x1
                 ;	x1 -> Y+0
                 ; 0000 0059 lcd_printf("Enter your ID    ");
                 ; 0000 005A userID = 0;
000143 2499      	CLR  R9
                 ; 0000 005B //
                 ; 0000 005C for (i = 0; i < 3; i++) {
000144 2477      	CLR  R7
                 _0x10:
000145 e0e3      	LDI  R30,LOW(3)
000146 167e      	CP   R7,R30
000147 f420      	BRSH _0x11
                 ; 0000 005D x1 = keypad();
000148 d3e3      	RCALL SUBOPT_0x2
                 ; 0000 005E lcd_printf("%d",x1);
000149 d3e7      	RCALL SUBOPT_0x3
                 ; 0000 005F userID = userID * 10 + x1; //+ (x1 - '0');
                 ; 0000 0060 }
00014a 9473      	INC  R7
00014b cff9      	RJMP _0x10
                 _0x11:
                 ; 0000 0061 lcd_clear();
00014c d3fa      	RCALL SUBOPT_0x4
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064 flagID =0;
                 ; 0000 0065 // check the ID
                 ; 0000 0066 flagID = get_address_id(userID);
                 ; 0000 0067 if (flagID)
00014d f141      	BREQ _0x12
                 ; 0000 0068 {    // 3 chanses to enter pass Code
                 ; 0000 0069 for (j=0; j<3;j++)
00014e 2466      	CLR  R6
                 _0x14:
00014f e0e3      	LDI  R30,LOW(3)
000150 166e      	CP   R6,R30
000151 f518      	BRSH _0x15
                 ; 0000 006A {
                 ; 0000 006B lcd_clear();
000152 d1ff      	RCALL _lcd_clear
                 ; 0000 006C lcd_printf("Enter your Pass Code ");
                +
000153 eaeb     +LDI R30 , LOW ( 2 * _0x0 + ( 47 ) )
000154 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 47 ) )
                 	__POINTW1FN _0x0,47
000155 d3c8      	RCALL SUBOPT_0x0
                 ; 0000 006D passCode=0;
000156 2488      	CLR  R8
                 ; 0000 006E for (i = 0; i < 3; i++) {
000157 2477      	CLR  R7
                 _0x17:
000158 e0e3      	LDI  R30,LOW(3)
000159 167e      	CP   R7,R30
00015a f438      	BRSH _0x18
                 ; 0000 006F x1 = keypad();
00015b d3d0      	RCALL SUBOPT_0x2
                 ; 0000 0070 lcd_printf("*");
                +
00015c ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 69 ) )
00015d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW1FN _0x0,69
00015e d3bf      	RCALL SUBOPT_0x0
                 ; 0000 0071 passCode = passCode * 10 + x1; //+ (x1 - '0');
00015f d3f1      	RCALL SUBOPT_0x5
                 ; 0000 0072 }
000160 9473      	INC  R7
000161 cff6      	RJMP _0x17
                 _0x18:
                 ; 0000 0073 // check the pass code
                 ; 0000 0074 flagPC = 0;
000162 d3f6      	RCALL SUBOPT_0x6
                 ; 0000 0075 flagPC = get_address_pc(passCode);
                 ; 0000 0076 if (flagID == flagPC - 1)
000163 f439      	BRNE _0x19
                 ; 0000 0077 {
                 ; 0000 0078 Welcome_Display(flagID);
000164 91a0 0160 	LDS  R26,_flagID
000166 d120      	RCALL _Welcome_Display
                 ; 0000 0079 delay_ms(500);
000167 efa4      	LDI  R26,LOW(500)
000168 e0b1      	LDI  R27,HIGH(500)
000169 d466      	RCALL _delay_ms
                 ; 0000 007A break;
00016a c00a      	RJMP _0x15
                 ; 0000 007B }
                 ; 0000 007C else{
                 _0x19:
                 ; 0000 007D lcd_clear();
00016b d1e6      	RCALL _lcd_clear
                 ; 0000 007E lcd_printf("Sorry, Wrong PC ");
                +
00016c ece3     +LDI R30 , LOW ( 2 * _0x0 + ( 71 ) )
00016d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW1FN _0x0,71
00016e d3af      	RCALL SUBOPT_0x0
                 ; 0000 007F // one peep
                 ; 0000 0080 peep();
00016f d136      	RCALL _peep
                 ; 0000 0081 delay_ms(100);
000170 e6a4      	LDI  R26,LOW(100)
000171 e0b0      	LDI  R27,0
000172 d45d      	RCALL _delay_ms
                 ; 0000 0082 }
                 ; 0000 0083 }
000173 9463      	INC  R6
000174 cfda      	RJMP _0x14
                 _0x15:
                 ; 0000 0084 }
                 ; 0000 0085 else
000175 c009      	RJMP _0x1B
                 _0x12:
                 ; 0000 0086 {
                 ; 0000 0087 lcd_clear();
000176 d1db      	RCALL _lcd_clear
                 ; 0000 0088 lcd_printf("Wrong ID ");
                +
000177 ede4     +LDI R30 , LOW ( 2 * _0x0 + ( 88 ) )
000178 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW1FN _0x0,88
000179 d3a4      	RCALL SUBOPT_0x0
                 ; 0000 0089 // 2 peep
                 ; 0000 008A peep();
00017a d12b      	RCALL _peep
                 ; 0000 008B peep();
00017b d12a      	RCALL _peep
                 ; 0000 008C delay_ms(100);
00017c e6a4      	LDI  R26,LOW(100)
00017d e0b0      	LDI  R27,0
00017e d451      	RCALL _delay_ms
                 ; 0000 008D }
                 _0x1B:
                 ; 0000 008E }
00017f c069      	RJMP _0xAB
                 ; 0000 008F 
                 ; 0000 0090 else if (x1 == 11)
                 _0xE:
000180 e0eb      	LDI  R30,LOW(11)
000181 e0f0      	LDI  R31,HIGH(11)
000182 17e0      	CP   R30,R16
000183 07f1      	CPC  R31,R17
000184 f009      	BREQ PC+2
000185 c064      	RJMP _0x1D
                 ; 0000 0091 {
                 ; 0000 0092 int x1=0;
                 ; 0000 0093 lcd_clear();
000186 d39d      	RCALL SUBOPT_0x1
                 ;	x1 -> Y+0
                 ; 0000 0094 lcd_printf("Enter your ID    ");
                 ; 0000 0095 userID = 0;
000187 2499      	CLR  R9
                 ; 0000 0096 //
                 ; 0000 0097 for (i = 0; i < 3; i++) {
000188 2477      	CLR  R7
                 _0x1F:
000189 e0e3      	LDI  R30,LOW(3)
00018a 167e      	CP   R7,R30
00018b f420      	BRSH _0x20
                 ; 0000 0098 x1 = keypad();
00018c d39f      	RCALL SUBOPT_0x2
                 ; 0000 0099 lcd_printf("%d",x1);
00018d d3a3      	RCALL SUBOPT_0x3
                 ; 0000 009A userID = userID * 10 + x1; //+ (x1 - '0');
                 ; 0000 009B }
00018e 9473      	INC  R7
00018f cff9      	RJMP _0x1F
                 _0x20:
                 ; 0000 009C lcd_clear();
000190 d3b6      	RCALL SUBOPT_0x4
                 ; 0000 009D //lcd_printf(" the student id = %d",studentID);
                 ; 0000 009E flagID =0;
                 ; 0000 009F // check the ID
                 ; 0000 00A0 flagID = get_address_id(userID);
                 ; 0000 00A1 
                 ; 0000 00A2 if (flagID)
000191 f409      	BRNE PC+2
000192 c050      	RJMP _0x21
                 ; 0000 00A3 {    // 3 chanses to enter pass Code
                 ; 0000 00A4 
                 ; 0000 00A5 lcd_clear();
000193 d1be      	RCALL _lcd_clear
                 ; 0000 00A6 lcd_printf("Enter the Old PC ");
                +
000194 edee     +LDI R30 , LOW ( 2 * _0x0 + ( 98 ) )
000195 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 98 ) )
                 	__POINTW1FN _0x0,98
000196 d387      	RCALL SUBOPT_0x0
                 ; 0000 00A7 passCode =0;
000197 2488      	CLR  R8
                 ; 0000 00A8 for (i = 0; i < 3; i++) {
000198 2477      	CLR  R7
                 _0x23:
000199 e0e3      	LDI  R30,LOW(3)
00019a 167e      	CP   R7,R30
00019b f438      	BRSH _0x24
                 ; 0000 00A9 x1 = keypad();
00019c d38f      	RCALL SUBOPT_0x2
                 ; 0000 00AA lcd_printf("*");
                +
00019d ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 69 ) )
00019e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW1FN _0x0,69
00019f d37e      	RCALL SUBOPT_0x0
                 ; 0000 00AB passCode = passCode * 10 + x1; //+ (x1 - '0');
0001a0 d3b0      	RCALL SUBOPT_0x5
                 ; 0000 00AC }
0001a1 9473      	INC  R7
0001a2 cff6      	RJMP _0x23
                 _0x24:
                 ; 0000 00AD // check the pass code
                 ; 0000 00AE flagPC = 0;
0001a3 d3b5      	RCALL SUBOPT_0x6
                 ; 0000 00AF flagPC = get_address_pc(passCode);
                 ; 0000 00B0 if (flagID == flagPC - 1)
0001a4 f5b9      	BRNE _0x25
                 ; 0000 00B1 {
                 ; 0000 00B2 
                 ; 0000 00B3 lcd_clear();
0001a5 d3c2      	RCALL SUBOPT_0x7
                 ; 0000 00B4 lcd_printf("Enter the New PC ");
                 ; 0000 00B5 newPassCode =0;
0001a6 24bb      	CLR  R11
                 ; 0000 00B6 for (i = 0; i < 3; i++) {
0001a7 2477      	CLR  R7
                 _0x27:
0001a8 e0e3      	LDI  R30,LOW(3)
0001a9 167e      	CP   R7,R30
0001aa f450      	BRSH _0x28
                 ; 0000 00B7 x1 = keypad();
0001ab d380      	RCALL SUBOPT_0x2
                 ; 0000 00B8 lcd_printf("*");
                +
0001ac ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 69 ) )
0001ad e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW1FN _0x0,69
0001ae d36f      	RCALL SUBOPT_0x0
                 ; 0000 00B9 newPassCode = newPassCode * 10 + x1; //+ (x1 - '0');
0001af d3bc      	RCALL SUBOPT_0x8
0001b0 81a8      	LD   R26,Y
0001b1 0fea      	ADD  R30,R26
0001b2 2ebe      	MOV  R11,R30
                 ; 0000 00BA }
0001b3 9473      	INC  R7
0001b4 cff3      	RJMP _0x27
                 _0x28:
                 ; 0000 00BB lcd_clear();
0001b5 d19c      	RCALL _lcd_clear
                 ; 0000 00BC lcd_printf("Renter the New PC ");
                +
0001b6 e0e2     +LDI R30 , LOW ( 2 * _0x0 + ( 134 ) )
0001b7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 134 ) )
                 	__POINTW1FN _0x0,134
0001b8 d365      	RCALL SUBOPT_0x0
                 ; 0000 00BD renterPassCode =0;
0001b9 24aa      	CLR  R10
                 ; 0000 00BE for (i = 0; i < 3; i++) {
0001ba 2477      	CLR  R7
                 _0x2A:
0001bb e0e3      	LDI  R30,LOW(3)
0001bc 167e      	CP   R7,R30
0001bd f468      	BRSH _0x2B
                 ; 0000 00BF x1 = keypad();
0001be d36d      	RCALL SUBOPT_0x2
                 ; 0000 00C0 lcd_printf("*");
                +
0001bf ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 69 ) )
0001c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW1FN _0x0,69
0001c1 d35c      	RCALL SUBOPT_0x0
                 ; 0000 00C1 renterPassCode = renterPassCode * 10 + x1; //+ (x1 - '0');
0001c2 2dea      	MOV  R30,R10
0001c3 e0aa      	LDI  R26,LOW(10)
0001c4 02ea      	MULS R30,R26
0001c5 01f0      	MOVW R30,R0
0001c6 81a8      	LD   R26,Y
0001c7 0fea      	ADD  R30,R26
0001c8 2eae      	MOV  R10,R30
                 ; 0000 00C2 }
0001c9 9473      	INC  R7
0001ca cff0      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00C3 if (newPassCode == renterPassCode)
0001cb 14ab      	CP   R10,R11
0001cc f441      	BRNE _0x2C
                 ; 0000 00C4 {
                 ; 0000 00C5 EE_Write(flagPC,newPassCode);
0001cd 91e0 0161 	LDS  R30,_flagPC
0001cf e0f0      	LDI  R31,0
0001d0 d3a0      	RCALL SUBOPT_0x9
                 ; 0000 00C6 lcd_clear();
                 ; 0000 00C7 lcd_printf("New PC is Stored");
                 ; 0000 00C8 delay_ms(500);
0001d1 efa4      	LDI  R26,LOW(500)
0001d2 e0b1      	LDI  R27,HIGH(500)
0001d3 d3fc      	RCALL _delay_ms
                 ; 0000 00C9 
                 ; 0000 00CA }
                 ; 0000 00CB else
0001d4 c006      	RJMP _0x2D
                 _0x2C:
                 ; 0000 00CC {
                 ; 0000 00CD lcd_clear();
0001d5 d17c      	RCALL _lcd_clear
                 ; 0000 00CE lcd_printf("Contact Admin ");
                +
0001d6 e2e6     +LDI R30 , LOW ( 2 * _0x0 + ( 170 ) )
0001d7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 170 ) )
                 	__POINTW1FN _0x0,170
0001d8 d345      	RCALL SUBOPT_0x0
                 ; 0000 00CF peep();
0001d9 d0cc      	RCALL _peep
                 ; 0000 00D0 peep();
0001da d0cb      	RCALL _peep
                 ; 0000 00D1 }
                 _0x2D:
                 ; 0000 00D2 
                 ; 0000 00D3 
                 ; 0000 00D4 
                 ; 0000 00D5 
                 ; 0000 00D6 }
                 ; 0000 00D7 else{
0001db c006      	RJMP _0x2E
                 _0x25:
                 ; 0000 00D8 lcd_clear();
0001dc d175      	RCALL _lcd_clear
                 ; 0000 00D9 lcd_printf("Wrong PC,Contact Admin ");
                +
0001dd e3e5     +LDI R30 , LOW ( 2 * _0x0 + ( 185 ) )
0001de e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 185 ) )
                 	__POINTW1FN _0x0,185
0001df d33e      	RCALL SUBOPT_0x0
                 ; 0000 00DA peep();
0001e0 d0c5      	RCALL _peep
                 ; 0000 00DB peep();
0001e1 d0c4      	RCALL _peep
                 ; 0000 00DC }
                 _0x2E:
                 ; 0000 00DD 
                 ; 0000 00DE 
                 ; 0000 00DF }
                 ; 0000 00E0 else
0001e2 c006      	RJMP _0x2F
                 _0x21:
                 ; 0000 00E1 {
                 ; 0000 00E2 lcd_clear();
0001e3 d16e      	RCALL _lcd_clear
                 ; 0000 00E3 lcd_printf("Wrong ID,Contact Admin ");
                +
0001e4 e4ed     +LDI R30 , LOW ( 2 * _0x0 + ( 209 ) )
0001e5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 209 ) )
                 	__POINTW1FN _0x0,209
0001e6 d337      	RCALL SUBOPT_0x0
                 ; 0000 00E4 // 2 peep
                 ; 0000 00E5 peep();
0001e7 d0be      	RCALL _peep
                 ; 0000 00E6 peep();
0001e8 d0bd      	RCALL _peep
                 ; 0000 00E7 }
                 _0x2F:
                 ; 0000 00E8 
                 ; 0000 00E9 
                 ; 0000 00EA }
                 _0xAB:
0001e9 9622      	ADIW R28,2
                 ; 0000 00EB }
                 _0x1D:
0001ea cf4b      	RJMP _0xB
                 ; 0000 00EC }
                 _0x30:
0001eb cfff      	RJMP _0x30
                 ; .FEND
                 ;char keypad()
                 ; 0000 00EF {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 00F0 while(1)
                 _0x31:
                 ; 0000 00F1 {
                 ; 0000 00F2 PORTC.0 = 0; PORTC.1 = 1; PORTC.2 = 1;
0001ec 98a8      	CBI  0x15,0
0001ed 9aa9      	SBI  0x15,1
0001ee 9aaa      	SBI  0x15,2
                 ; 0000 00F3 //Only C1 is activated
                 ; 0000 00F4 switch(PINC)
0001ef b3e3      	IN   R30,0x13
                 ; 0000 00F5 {
                 ; 0000 00F6 case 0b11110110:
0001f0 3fe6      	CPI  R30,LOW(0xF6)
0001f1 f429      	BRNE _0x3D
                 ; 0000 00F7 while (PINC.3 == 0);
                 _0x3E:
0001f2 9b9b      	SBIS 0x13,3
0001f3 cffe      	RJMP _0x3E
                 ; 0000 00F8 return 1;
0001f4 e0e1      	LDI  R30,LOW(1)
0001f5 9508      	RET
                 ; 0000 00F9 break;
0001f6 c014      	RJMP _0x3C
                 ; 0000 00FA 
                 ; 0000 00FB case 0b11101110:
                 _0x3D:
0001f7 3eee      	CPI  R30,LOW(0xEE)
0001f8 f429      	BRNE _0x41
                 ; 0000 00FC while (PINC.4 == 0);
                 _0x42:
0001f9 9b9c      	SBIS 0x13,4
0001fa cffe      	RJMP _0x42
                 ; 0000 00FD return 4;
0001fb e0e4      	LDI  R30,LOW(4)
0001fc 9508      	RET
                 ; 0000 00FE break;
0001fd c00d      	RJMP _0x3C
                 ; 0000 00FF 
                 ; 0000 0100 case 0b11011110:
                 _0x41:
0001fe 3dee      	CPI  R30,LOW(0xDE)
0001ff f429      	BRNE _0x45
                 ; 0000 0101 while (PINC.5 == 0);
                 _0x46:
000200 9b9d      	SBIS 0x13,5
000201 cffe      	RJMP _0x46
                 ; 0000 0102 return 7;
000202 e0e7      	LDI  R30,LOW(7)
000203 9508      	RET
                 ; 0000 0103 break;
000204 c006      	RJMP _0x3C
                 ; 0000 0104 
                 ; 0000 0105 case 0b10111110:
                 _0x45:
000205 3bee      	CPI  R30,LOW(0xBE)
000206 f421      	BRNE _0x3C
                 ; 0000 0106 while (PINC.6 == 0);
                 _0x4A:
000207 9b9e      	SBIS 0x13,6
000208 cffe      	RJMP _0x4A
                 ; 0000 0107 return 10;
000209 e0ea      	LDI  R30,LOW(10)
00020a 9508      	RET
                 ; 0000 0108 break;
                 ; 0000 0109 
                 ; 0000 010A }
                 _0x3C:
                 ; 0000 010B PORTC.0 = 1; PORTC.1 = 0; PORTC.2 = 1;
00020b 9aa8      	SBI  0x15,0
00020c 98a9      	CBI  0x15,1
00020d 9aaa      	SBI  0x15,2
                 ; 0000 010C //Only C2 is activated
                 ; 0000 010D switch(PINC)
00020e b3e3      	IN   R30,0x13
                 ; 0000 010E {
                 ; 0000 010F case 0b11110101:
00020f 3fe5      	CPI  R30,LOW(0xF5)
000210 f429      	BRNE _0x56
                 ; 0000 0110 while (PINC.3 == 0);
                 _0x57:
000211 9b9b      	SBIS 0x13,3
000212 cffe      	RJMP _0x57
                 ; 0000 0111 return 2;
000213 e0e2      	LDI  R30,LOW(2)
000214 9508      	RET
                 ; 0000 0112 break;
000215 c014      	RJMP _0x55
                 ; 0000 0113 
                 ; 0000 0114 case 0b11101101:
                 _0x56:
000216 3eed      	CPI  R30,LOW(0xED)
000217 f429      	BRNE _0x5A
                 ; 0000 0115 while (PINC.4 == 0);
                 _0x5B:
000218 9b9c      	SBIS 0x13,4
000219 cffe      	RJMP _0x5B
                 ; 0000 0116 return 5;
00021a e0e5      	LDI  R30,LOW(5)
00021b 9508      	RET
                 ; 0000 0117 break;
00021c c00d      	RJMP _0x55
                 ; 0000 0118 
                 ; 0000 0119 case 0b11011101:
                 _0x5A:
00021d 3ded      	CPI  R30,LOW(0xDD)
00021e f429      	BRNE _0x5E
                 ; 0000 011A while (PINC.5 == 0);
                 _0x5F:
00021f 9b9d      	SBIS 0x13,5
000220 cffe      	RJMP _0x5F
                 ; 0000 011B return 8;
000221 e0e8      	LDI  R30,LOW(8)
000222 9508      	RET
                 ; 0000 011C break;
000223 c006      	RJMP _0x55
                 ; 0000 011D 
                 ; 0000 011E case 0b10111101:
                 _0x5E:
000224 3bed      	CPI  R30,LOW(0xBD)
000225 f421      	BRNE _0x55
                 ; 0000 011F while (PINC.6 == 0);
                 _0x63:
000226 9b9e      	SBIS 0x13,6
000227 cffe      	RJMP _0x63
                 ; 0000 0120 return 0;
000228 e0e0      	LDI  R30,LOW(0)
000229 9508      	RET
                 ; 0000 0121 break;
                 ; 0000 0122 
                 ; 0000 0123 }
                 _0x55:
                 ; 0000 0124 PORTC.0 = 1; PORTC.1 = 1; PORTC.2 = 0;
00022a 9aa8      	SBI  0x15,0
00022b 9aa9      	SBI  0x15,1
00022c 98aa      	CBI  0x15,2
                 ; 0000 0125 //Only C3 is activated
                 ; 0000 0126 switch(PINC)
00022d b3e3      	IN   R30,0x13
                 ; 0000 0127 {
                 ; 0000 0128 case 0b11110011:
00022e 3fe3      	CPI  R30,LOW(0xF3)
00022f f429      	BRNE _0x6F
                 ; 0000 0129 while (PINC.3 == 0);
                 _0x70:
000230 9b9b      	SBIS 0x13,3
000231 cffe      	RJMP _0x70
                 ; 0000 012A return 3;
000232 e0e3      	LDI  R30,LOW(3)
000233 9508      	RET
                 ; 0000 012B break;
000234 c014      	RJMP _0x6E
                 ; 0000 012C 
                 ; 0000 012D case 0b11101011:
                 _0x6F:
000235 3eeb      	CPI  R30,LOW(0xEB)
000236 f429      	BRNE _0x73
                 ; 0000 012E while (PINC.4 == 0);
                 _0x74:
000237 9b9c      	SBIS 0x13,4
000238 cffe      	RJMP _0x74
                 ; 0000 012F return 6;
000239 e0e6      	LDI  R30,LOW(6)
00023a 9508      	RET
                 ; 0000 0130 break;
00023b c00d      	RJMP _0x6E
                 ; 0000 0131 
                 ; 0000 0132 case 0b11011011:
                 _0x73:
00023c 3deb      	CPI  R30,LOW(0xDB)
00023d f429      	BRNE _0x77
                 ; 0000 0133 while (PINC.5 == 0);
                 _0x78:
00023e 9b9d      	SBIS 0x13,5
00023f cffe      	RJMP _0x78
                 ; 0000 0134 return 9;
000240 e0e9      	LDI  R30,LOW(9)
000241 9508      	RET
                 ; 0000 0135 break;
000242 c006      	RJMP _0x6E
                 ; 0000 0136 
                 ; 0000 0137 case 0b10111011:
                 _0x77:
000243 3beb      	CPI  R30,LOW(0xBB)
000244 f421      	BRNE _0x6E
                 ; 0000 0138 while (PINC.6 == 0);
                 _0x7C:
000245 9b9e      	SBIS 0x13,6
000246 cffe      	RJMP _0x7C
                 ; 0000 0139 return 11;
000247 e0eb      	LDI  R30,LOW(11)
000248 9508      	RET
                 ; 0000 013A break;
                 ; 0000 013B 
                 ; 0000 013C }
                 _0x6E:
                 ; 0000 013D 
                 ; 0000 013E }
000249 cfa2      	RJMP _0x31
                 ; 0000 013F }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 0142 {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 0143 while(EECR.1 == 1);    //Wait till EEPROM is ready
00024a 931a      	ST   -Y,R17
00024b 930a      	ST   -Y,R16
00024c 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x7F:
00024d 99e1      	SBIC 0x1C,1
00024e cffe      	RJMP _0x7F
                 ; 0000 0144 EEAR = address;        //Prepare the address you want to read from
                +
00024f bb1f     +OUT 30 + 1 , R17
000250 bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 0145 
                 ; 0000 0146 EECR.0 = 1;            //Execute read command
000251 9ae0      	SBI  0x1C,0
                 ; 0000 0147 
                 ; 0000 0148 return EEDR;
000252 b3ed      	IN   R30,0x1D
000253 c030      	RJMP _0x2080003
                 ; 0000 0149 
                 ; 0000 014A }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 014D {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 014E while(EECR.1 == 1);    //Wait till EEPROM is ready
000254 d362      	RCALL __SAVELOCR4
000255 2f1a      	MOV  R17,R26
                +
000256 812c     +LDD R18 , Y + 4
000257 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x84:
000258 99e1      	SBIC 0x1C,1
000259 cffe      	RJMP _0x84
                 ; 0000 014F EEAR = address;        //Prepare the address you want to read from
                +
00025a bb3f     +OUT 30 + 1 , R19
00025b bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 0150 EEDR = data;           //Prepare the data you want to write in the address above
00025c bb1d      	OUT  0x1D,R17
                 ; 0000 0151 EECR.2 = 1;            //Master write enable
00025d 9ae2      	SBI  0x1C,2
                 ; 0000 0152 EECR.1 = 1;            //Write Enable
00025e 9ae1      	SBI  0x1C,1
                 ; 0000 0153 }
00025f d35e      	RCALL __LOADLOCR4
000260 9626      	ADIW R28,6
000261 9508      	RET
                 ; .FEND
                 ;char get_address_id(char ID)
                 ; 0000 0158 {       char res=0;
                 _get_address_id:
                 ; .FSTART _get_address_id
                 ; 0000 0159 for (i =1; i<=8; i = i+2)
000262 d316      	RCALL SUBOPT_0xA
                 ;	ID -> R16
                 ;	res -> R17
000263 e0e1      	LDI  R30,LOW(1)
000264 2e7e      	MOV  R7,R30
                 _0x8C:
000265 e0e8      	LDI  R30,LOW(8)
000266 15e7      	CP   R30,R7
000267 f050      	BRLO _0x8D
                 ; 0000 015A {
                 ; 0000 015B if (EE_Read(i) == userID)
000268 2da7      	MOV  R26,R7
000269 27bb      	CLR  R27
00026a dfdf      	RCALL _EE_Read
00026b 169e      	CP   R9,R30
00026c f411      	BRNE _0x8E
                 ; 0000 015C {
                 ; 0000 015D res = i;
00026d 2d17      	MOV  R17,R7
                 ; 0000 015E break;
00026e c003      	RJMP _0x8D
                 ; 0000 015F }
                 ; 0000 0160 }
                 _0x8E:
00026f 9473      	INC  R7
000270 9473      	INC  R7
000271 cff3      	RJMP _0x8C
                 _0x8D:
                 ; 0000 0161 return res;
000272 c010      	RJMP _0x2080002
                 ; 0000 0162 }
                 ; .FEND
                 ;char get_address_pc(char PC)
                 ; 0000 0164 {
                 _get_address_pc:
                 ; .FSTART _get_address_pc
                 ; 0000 0165 char res=0;
                 ; 0000 0166 for (i =2; i<=8; i = i+2)
000273 d305      	RCALL SUBOPT_0xA
                 ;	PC -> R16
                 ;	res -> R17
000274 e0e2      	LDI  R30,LOW(2)
000275 2e7e      	MOV  R7,R30
                 _0x90:
000276 e0e8      	LDI  R30,LOW(8)
000277 15e7      	CP   R30,R7
000278 f050      	BRLO _0x91
                 ; 0000 0167 {
                 ; 0000 0168 if (EE_Read(i) == passCode)
000279 2da7      	MOV  R26,R7
00027a 27bb      	CLR  R27
00027b dfce      	RCALL _EE_Read
00027c 168e      	CP   R8,R30
00027d f411      	BRNE _0x92
                 ; 0000 0169 {
                 ; 0000 016A res = i;
00027e 2d17      	MOV  R17,R7
                 ; 0000 016B break;
00027f c003      	RJMP _0x91
                 ; 0000 016C }
                 ; 0000 016D }
                 _0x92:
000280 9473      	INC  R7
000281 9473      	INC  R7
000282 cff3      	RJMP _0x90
                 _0x91:
                 ; 0000 016E return res;
                 _0x2080002:
000283 2fe1      	MOV  R30,R17
                 _0x2080003:
000284 9109      	LD   R16,Y+
000285 9119      	LD   R17,Y+
000286 9508      	RET
                 ; 0000 016F }
                 ; .FEND
                 ;void Welcome_Display(char addr_ID)
                 ; 0000 0172 {
                 _Welcome_Display:
                 ; .FSTART _Welcome_Display
                 ; 0000 0173 lcd_clear();
000287 931a      	ST   -Y,R17
000288 2f1a      	MOV  R17,R26
                 ;	addr_ID -> R17
000289 d0c8      	RCALL _lcd_clear
                 ; 0000 0174 if (addr_ID == 1)
00028a 3011      	CPI  R17,1
00028b f419      	BRNE _0x93
                 ; 0000 0175 {
                 ; 0000 0176 lcd_printf("Welcome, Admin ");
                +
00028c e6e5     +LDI R30 , LOW ( 2 * _0x0 + ( 233 ) )
00028d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 233 ) )
                 	__POINTW1FN _0x0,233
00028e c011      	RJMP _0xAC
                 ; 0000 0177 }
                 ; 0000 0178 else
                 _0x93:
                 ; 0000 0179 {
                 ; 0000 017A lcd_printf("Welcome, Student ");
                +
00028f e7e5     +LDI R30 , LOW ( 2 * _0x0 + ( 249 ) )
000290 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 249 ) )
                 	__POINTW1FN _0x0,249
000291 d28c      	RCALL SUBOPT_0x0
                 ; 0000 017B if (addr_ID == 3)
000292 3013      	CPI  R17,3
000293 f419      	BRNE _0x95
                 ; 0000 017C lcd_printf("Ahmed ");
                +
000294 e8e7     +LDI R30 , LOW ( 2 * _0x0 + ( 267 ) )
000295 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 267 ) )
                 	__POINTW1FN _0x0,267
000296 c009      	RJMP _0xAC
                 ; 0000 017D else if (addr_ID == 5)
                 _0x95:
000297 3015      	CPI  R17,5
000298 f419      	BRNE _0x97
                 ; 0000 017E lcd_printf("Mohamed ");
                +
000299 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 274 ) )
00029a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 274 ) )
                 	__POINTW1FN _0x0,274
00029b c004      	RJMP _0xAC
                 ; 0000 017F else if (addr_ID == 7)
                 _0x97:
00029c 3017      	CPI  R17,7
00029d f439      	BRNE _0x99
                 ; 0000 0180 lcd_printf("Mahmoud ");
                +
00029e e9e7     +LDI R30 , LOW ( 2 * _0x0 + ( 283 ) )
00029f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 283 ) )
                 	__POINTW1FN _0x0,283
                 _0xAC:
0002a0 93fa      	ST   -Y,R31
0002a1 93ea      	ST   -Y,R30
0002a2 e080      	LDI  R24,0
0002a3 d23a      	RCALL _lcd_printf
0002a4 9622      	ADIW R28,2
                 ; 0000 0181 }
                 _0x99:
                 ; 0000 0182 
                 ; 0000 0183 }
0002a5 c100      	RJMP _0x2080001
                 ; .FEND
                 ;void peep()
                 ; 0000 0186 {
                 _peep:
                 ; .FSTART _peep
                 ; 0000 0187 PORTB.0 = 1;
0002a6 9ac0      	SBI  0x18,0
                 ; 0000 0188 delay_ms(100);
0002a7 e6a4      	LDI  R26,LOW(100)
0002a8 e0b0      	LDI  R27,0
0002a9 d326      	RCALL _delay_ms
                 ; 0000 0189 PORTB.0 = 0;
0002aa 98c0      	CBI  0x18,0
                 ; 0000 018A delay_ms(100);
0002ab e6a4      	LDI  R26,LOW(100)
0002ac e0b0      	LDI  R27,0
0002ad d322      	RCALL _delay_ms
                 ; 0000 018B }
0002ae 9508      	RET
                 ; .FEND
                 ;interrupt [2] void ext0 (void)
                 ; 0000 0193 {
                 _ext0:
                 ; .FSTART _ext0
0002af 920a      	ST   -Y,R0
0002b0 921a      	ST   -Y,R1
0002b1 92fa      	ST   -Y,R15
0002b2 936a      	ST   -Y,R22
0002b3 937a      	ST   -Y,R23
0002b4 938a      	ST   -Y,R24
0002b5 939a      	ST   -Y,R25
0002b6 93aa      	ST   -Y,R26
0002b7 93ba      	ST   -Y,R27
0002b8 93ea      	ST   -Y,R30
0002b9 93fa      	ST   -Y,R31
0002ba b7ef      	IN   R30,SREG
0002bb 93ea      	ST   -Y,R30
                 ; 0000 0194 
                 ; 0000 0195 lcd_clear();
0002bc d095      	RCALL _lcd_clear
                 ; 0000 0196 lcd_printf("Enter Admin Pass Code ");
                +
0002bd eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 292 ) )
0002be e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 292 ) )
                 	__POINTW1FN _0x0,292
0002bf d25e      	RCALL SUBOPT_0x0
                 ; 0000 0197 x1=0;
0002c0 2444      	CLR  R4
0002c1 2455      	CLR  R5
                 ; 0000 0198 passCode=0;
0002c2 2488      	CLR  R8
                 ; 0000 0199 for (i = 0; i < 3; i++) {
0002c3 2477      	CLR  R7
                 _0x9F:
0002c4 e0e3      	LDI  R30,LOW(3)
0002c5 167e      	CP   R7,R30
0002c6 f430      	BRSH _0xA0
                 ; 0000 019A x1 = keypad();
0002c7 d2b6      	RCALL SUBOPT_0xB
                 ; 0000 019B lcd_printf("*");
                 ; 0000 019C passCode = passCode * 10 + x1; //+ (x1 - '0');
0002c8 2de8      	MOV  R30,R8
0002c9 d2ba      	RCALL SUBOPT_0xC
0002ca 2e8e      	MOV  R8,R30
                 ; 0000 019D }
0002cb 9473      	INC  R7
0002cc cff7      	RJMP _0x9F
                 _0xA0:
                 ; 0000 019E if (passCode == EE_Read(2))
0002cd e0a2      	LDI  R26,LOW(2)
0002ce e0b0      	LDI  R27,0
0002cf df7a      	RCALL _EE_Read
0002d0 15e8      	CP   R30,R8
0002d1 f5c9      	BRNE _0xA1
                 ; 0000 019F {
                 ; 0000 01A0 lcd_clear();
0002d2 d07f      	RCALL _lcd_clear
                 ; 0000 01A1 lcd_printf("Enter Student ID    ");
                +
0002d3 ebe7     +LDI R30 , LOW ( 2 * _0x0 + ( 315 ) )
0002d4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 315 ) )
                 	__POINTW1FN _0x0,315
0002d5 d248      	RCALL SUBOPT_0x0
                 ; 0000 01A2 userID = 0;
0002d6 2499      	CLR  R9
                 ; 0000 01A3 //
                 ; 0000 01A4 for (i = 0; i < 3; i++) {
0002d7 2477      	CLR  R7
                 _0xA3:
0002d8 e0e3      	LDI  R30,LOW(3)
0002d9 167e      	CP   R7,R30
0002da f4a8      	BRSH _0xA4
                 ; 0000 01A5 x1 = keypad();
0002db df10      	RCALL _keypad
0002dc 2e4e      	MOV  R4,R30
0002dd 2455      	CLR  R5
                 ; 0000 01A6 lcd_printf("%d",x1);
                +
0002de eae8     +LDI R30 , LOW ( 2 * _0x0 + ( 44 ) )
0002df e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW1FN _0x0,44
0002e0 93fa      	ST   -Y,R31
0002e1 93ea      	ST   -Y,R30
0002e2 01f2      	MOVW R30,R4
                +
0002e3 2f6f     +MOV R22 , R31
0002e4 0f66     +ADD R22 , R22
0002e5 0b66     +SBC R22 , R22
0002e6 2f76     +MOV R23 , R22
                 	__CWD1
0002e7 d2e3      	RCALL __PUTPARD1
0002e8 e084      	LDI  R24,4
0002e9 d1f4      	RCALL _lcd_printf
0002ea 9626      	ADIW R28,6
                 ; 0000 01A7 userID = userID * 10 + x1; //+ (x1 - '0');
0002eb 2de9      	MOV  R30,R9
0002ec d297      	RCALL SUBOPT_0xC
0002ed 2e9e      	MOV  R9,R30
                 ; 0000 01A8 }
0002ee 9473      	INC  R7
0002ef cfe8      	RJMP _0xA3
                 _0xA4:
                 ; 0000 01A9 lcd_clear();
0002f0 d256      	RCALL SUBOPT_0x4
                 ; 0000 01AA //lcd_printf(" the student id = %d",studentID);
                 ; 0000 01AB flagID =0;
                 ; 0000 01AC // check the ID
                 ; 0000 01AD flagID = get_address_id(userID);
                 ; 0000 01AE 
                 ; 0000 01AF if (flagID)
0002f1 f0a9      	BREQ _0xA5
                 ; 0000 01B0 {    // 3 chanses to enter pass Code
                 ; 0000 01B1 
                 ; 0000 01B2 lcd_clear();
0002f2 d275      	RCALL SUBOPT_0x7
                 ; 0000 01B3 lcd_printf("Enter the New PC ");
                 ; 0000 01B4 
                 ; 0000 01B5 newPassCode =0;
0002f3 24bb      	CLR  R11
                 ; 0000 01B6 for (i = 0; i < 3; i++) {
0002f4 2477      	CLR  R7
                 _0xA7:
0002f5 e0e3      	LDI  R30,LOW(3)
0002f6 167e      	CP   R7,R30
0002f7 f430      	BRSH _0xA8
                 ; 0000 01B7 x1 = keypad();
0002f8 d285      	RCALL SUBOPT_0xB
                 ; 0000 01B8 lcd_printf("*");
                 ; 0000 01B9 newPassCode = newPassCode * 10 + x1; //+ (x1 - '0');
0002f9 d272      	RCALL SUBOPT_0x8
0002fa 0de4      	ADD  R30,R4
0002fb 2ebe      	MOV  R11,R30
                 ; 0000 01BA }
0002fc 9473      	INC  R7
0002fd cff7      	RJMP _0xA7
                 _0xA8:
                 ; 0000 01BB EE_Write(flagID + 1,newPassCode);
0002fe 91e0 0160 	LDS  R30,_flagID
000300 e0f0      	LDI  R31,0
000301 9631      	ADIW R30,1
000302 d26e      	RCALL SUBOPT_0x9
                 ; 0000 01BC lcd_clear();
                 ; 0000 01BD lcd_printf("New PC is Stored");
                 ; 0000 01BE delay_ms(500);
000303 efa4      	LDI  R26,LOW(500)
000304 e0b1      	LDI  R27,HIGH(500)
000305 d2ca      	RCALL _delay_ms
                 ; 0000 01BF 
                 ; 0000 01C0 }
                 ; 0000 01C1 else{
000306 c003      	RJMP _0xA9
                 _0xA5:
                 ; 0000 01C2 lcd_clear();
000307 d281      	RCALL SUBOPT_0xD
                 ; 0000 01C3 lcd_printf("Contact Admin");
                 ; 0000 01C4 // 2 peep
                 ; 0000 01C5 peep();
000308 df9d      	RCALL _peep
                 ; 0000 01C6 peep();
000309 df9c      	RCALL _peep
                 ; 0000 01C7 }
                 _0xA9:
                 ; 0000 01C8 }
                 ; 0000 01C9 else{
00030a c003      	RJMP _0xAA
                 _0xA1:
                 ; 0000 01CA lcd_clear();
00030b d27d      	RCALL SUBOPT_0xD
                 ; 0000 01CB lcd_printf("Contact Admin");
                 ; 0000 01CC // 2 peep
                 ; 0000 01CD peep();
00030c df99      	RCALL _peep
                 ; 0000 01CE peep();
00030d df98      	RCALL _peep
                 ; 0000 01CF }
                 _0xAA:
                 ; 0000 01D0 
                 ; 0000 01D1 
                 ; 0000 01D2 
                 ; 0000 01D3 // break;
                 ; 0000 01D4 }
00030e 91e9      	LD   R30,Y+
00030f bfef      	OUT  SREG,R30
000310 91f9      	LD   R31,Y+
000311 91e9      	LD   R30,Y+
000312 91b9      	LD   R27,Y+
000313 91a9      	LD   R26,Y+
000314 9199      	LD   R25,Y+
000315 9189      	LD   R24,Y+
000316 9179      	LD   R23,Y+
000317 9169      	LD   R22,Y+
000318 90f9      	LD   R15,Y+
000319 9019      	LD   R1,Y+
00031a 9009      	LD   R0,Y+
00031b 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00031c 931a      	ST   -Y,R17
00031d 2f1a      	MOV  R17,R26
00031e b3eb      	IN   R30,0x1B
00031f 70ef      	ANDI R30,LOW(0xF)
000320 2fae      	MOV  R26,R30
000321 2fe1      	MOV  R30,R17
000322 7fe0      	ANDI R30,LOW(0xF0)
000323 2bea      	OR   R30,R26
000324 bbeb      	OUT  0x1B,R30
                +
000325 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000326 958a     +DEC R24
000327 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000328 9ada      	SBI  0x1B,2
                +
000329 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00032a 958a     +DEC R24
00032b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00032c 98da      	CBI  0x1B,2
                +
00032d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00032e 958a     +DEC R24
00032f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000330 c075      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000331 93aa      	ST   -Y,R26
000332 81a8      	LD   R26,Y
000333 dfe8      	RCALL __lcd_write_nibble_G100
000334 81e8          ld    r30,y
000335 95e2          swap  r30
000336 83e8          st    y,r30
000337 81a8      	LD   R26,Y
000338 dfe3      	RCALL __lcd_write_nibble_G100
                +
000339 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00033a 958a     +DEC R24
00033b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00033c 9621      	ADIW R28,1
00033d 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00033e 931a      	ST   -Y,R17
00033f 930a      	ST   -Y,R16
000340 2f1a      	MOV  R17,R26
000341 810a      	LDD  R16,Y+2
000342 2fe1      	MOV  R30,R17
000343 e0f0      	LDI  R31,0
000344 59ee      	SUBI R30,LOW(-__base_y_G100)
000345 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000346 81e0      	LD   R30,Z
000347 0fe0      	ADD  R30,R16
000348 2fae      	MOV  R26,R30
000349 dfe7      	RCALL __lcd_write_data
00034a 9300 0166 	STS  __lcd_x,R16
00034c 9310 0167 	STS  __lcd_y,R17
00034e 8119      	LDD  R17,Y+1
00034f 8108      	LDD  R16,Y+0
000350 9623      	ADIW R28,3
000351 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000352 e0a2      	LDI  R26,LOW(2)
000353 d239      	RCALL SUBOPT_0xE
000354 e0ac      	LDI  R26,LOW(12)
000355 dfdb      	RCALL __lcd_write_data
000356 e0a1      	LDI  R26,LOW(1)
000357 d235      	RCALL SUBOPT_0xE
000358 e0e0      	LDI  R30,LOW(0)
000359 93e0 0167 	STS  __lcd_y,R30
00035b 93e0 0166 	STS  __lcd_x,R30
00035d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00035e 931a      	ST   -Y,R17
00035f 2f1a      	MOV  R17,R26
000360 301a      	CPI  R17,10
000361 f031      	BREQ _0x2000005
000362 91e0 0168 	LDS  R30,__lcd_maxx
000364 91a0 0166 	LDS  R26,__lcd_x
000366 17ae      	CP   R26,R30
000367 f050      	BRLO _0x2000004
                 _0x2000005:
000368 e0e0      	LDI  R30,LOW(0)
000369 93ea      	ST   -Y,R30
00036a 91a0 0167 	LDS  R26,__lcd_y
00036c 5faf      	SUBI R26,-LOW(1)
00036d 93a0 0167 	STS  __lcd_y,R26
00036f dfce      	RCALL _lcd_gotoxy
000370 301a      	CPI  R17,10
000371 f1a1      	BREQ _0x2080001
                 _0x2000004:
000372 91e0 0166 	LDS  R30,__lcd_x
000374 5fef      	SUBI R30,-LOW(1)
000375 93e0 0166 	STS  __lcd_x,R30
000377 9ad8      	SBI  0x1B,0
000378 2fa1      	MOV  R26,R17
000379 dfb7      	RCALL __lcd_write_data
00037a 98d8      	CBI  0x1B,0
00037b c02a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00037c 931a      	ST   -Y,R17
00037d 2f1a      	MOV  R17,R26
00037e b3ea      	IN   R30,0x1A
00037f 6fe0      	ORI  R30,LOW(0xF0)
000380 bbea      	OUT  0x1A,R30
000381 9ad2      	SBI  0x1A,2
000382 9ad0      	SBI  0x1A,0
000383 9ad1      	SBI  0x1A,1
000384 98da      	CBI  0x1B,2
000385 98d8      	CBI  0x1B,0
000386 98d9      	CBI  0x1B,1
000387 9310 0168 	STS  __lcd_maxx,R17
000389 2fe1      	MOV  R30,R17
00038a 58e0      	SUBI R30,-LOW(128)
                +
00038b 93e0 0164+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00038d 2fe1      	MOV  R30,R17
00038e 54e0      	SUBI R30,-LOW(192)
                +
00038f 93e0 0165+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000391 e1a4      	LDI  R26,LOW(20)
000392 e0b0      	LDI  R27,0
000393 d23c      	RCALL _delay_ms
000394 d1fc      	RCALL SUBOPT_0xF
000395 d1fb      	RCALL SUBOPT_0xF
000396 d1fa      	RCALL SUBOPT_0xF
000397 e2a0      	LDI  R26,LOW(32)
000398 df83      	RCALL __lcd_write_nibble_G100
                +
000399 ec88     +LDI R24 , LOW ( 200 )
00039a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00039b 9701     +SBIW R24 , 1
00039c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00039d e2a8      	LDI  R26,LOW(40)
00039e df92      	RCALL __lcd_write_data
00039f e0a4      	LDI  R26,LOW(4)
0003a0 df90      	RCALL __lcd_write_data
0003a1 e8a5      	LDI  R26,LOW(133)
0003a2 df8e      	RCALL __lcd_write_data
0003a3 e0a6      	LDI  R26,LOW(6)
0003a4 df8c      	RCALL __lcd_write_data
0003a5 dfac      	RCALL _lcd_clear
                 _0x2080001:
0003a6 9119      	LD   R17,Y+
0003a7 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
0003a8 93ba      	ST   -Y,R27
0003a9 93aa      	ST   -Y,R26
0003aa 9726      	SBIW R28,6
0003ab d209      	RCALL __SAVELOCR6
0003ac e010      	LDI  R17,0
0003ad 85ac      	LDD  R26,Y+12
0003ae 85bd      	LDD  R27,Y+12+1
0003af e0e0      	LDI  R30,LOW(0)
0003b0 e0f0      	LDI  R31,HIGH(0)
0003b1 93ed      	ST   X+,R30
0003b2 93fc      	ST   X,R31
                 _0x2020016:
0003b3 89ea      	LDD  R30,Y+18
0003b4 89fb      	LDD  R31,Y+18+1
0003b5 9631      	ADIW R30,1
0003b6 8bea      	STD  Y+18,R30
0003b7 8bfb      	STD  Y+18+1,R31
0003b8 9731      	SBIW R30,1
0003b9 91e4      	LPM  R30,Z
0003ba 2f2e      	MOV  R18,R30
0003bb 30e0      	CPI  R30,0
0003bc f409      	BRNE PC+2
0003bd c10b      	RJMP _0x2020018
0003be 2fe1      	MOV  R30,R17
0003bf 30e0      	CPI  R30,0
0003c0 f431      	BRNE _0x202001C
0003c1 3225      	CPI  R18,37
0003c2 f411      	BRNE _0x202001D
0003c3 e011      	LDI  R17,LOW(1)
0003c4 c001      	RJMP _0x202001E
                 _0x202001D:
0003c5 d1d2      	RCALL SUBOPT_0x10
                 _0x202001E:
0003c6 c101      	RJMP _0x202001B
                 _0x202001C:
0003c7 30e1      	CPI  R30,LOW(0x1)
0003c8 f4a1      	BRNE _0x202001F
0003c9 3225      	CPI  R18,37
0003ca f411      	BRNE _0x2020020
0003cb d1cc      	RCALL SUBOPT_0x10
0003cc c0fa      	RJMP _0x20200CC
                 _0x2020020:
0003cd e012      	LDI  R17,LOW(2)
0003ce e040      	LDI  R20,LOW(0)
0003cf e000      	LDI  R16,LOW(0)
0003d0 322d      	CPI  R18,45
0003d1 f411      	BRNE _0x2020021
0003d2 e001      	LDI  R16,LOW(1)
0003d3 c0f4      	RJMP _0x202001B
                 _0x2020021:
0003d4 322b      	CPI  R18,43
0003d5 f411      	BRNE _0x2020022
0003d6 e24b      	LDI  R20,LOW(43)
0003d7 c0f0      	RJMP _0x202001B
                 _0x2020022:
0003d8 3220      	CPI  R18,32
0003d9 f411      	BRNE _0x2020023
0003da e240      	LDI  R20,LOW(32)
0003db c0ec      	RJMP _0x202001B
                 _0x2020023:
0003dc c002      	RJMP _0x2020024
                 _0x202001F:
0003dd 30e2      	CPI  R30,LOW(0x2)
0003de f439      	BRNE _0x2020025
                 _0x2020024:
0003df e050      	LDI  R21,LOW(0)
0003e0 e013      	LDI  R17,LOW(3)
0003e1 3320      	CPI  R18,48
0003e2 f411      	BRNE _0x2020026
0003e3 6800      	ORI  R16,LOW(128)
0003e4 c0e3      	RJMP _0x202001B
                 _0x2020026:
0003e5 c003      	RJMP _0x2020027
                 _0x2020025:
0003e6 30e3      	CPI  R30,LOW(0x3)
0003e7 f009      	BREQ PC+2
0003e8 c0df      	RJMP _0x202001B
                 _0x2020027:
0003e9 3320      	CPI  R18,48
0003ea f010      	BRLO _0x202002A
0003eb 332a      	CPI  R18,58
0003ec f008      	BRLO _0x202002B
                 _0x202002A:
0003ed c007      	RJMP _0x2020029
                 _0x202002B:
0003ee e0aa      	LDI  R26,LOW(10)
0003ef 9f5a      	MUL  R21,R26
0003f0 2d50      	MOV  R21,R0
0003f1 2fe2      	MOV  R30,R18
0003f2 53e0      	SUBI R30,LOW(48)
0003f3 0f5e      	ADD  R21,R30
0003f4 c0d3      	RJMP _0x202001B
                 _0x2020029:
0003f5 2fe2      	MOV  R30,R18
0003f6 36e3      	CPI  R30,LOW(0x63)
0003f7 f439      	BRNE _0x202002F
0003f8 d1a6      	RCALL SUBOPT_0x11
0003f9 89e8      	LDD  R30,Y+16
0003fa 89f9      	LDD  R31,Y+16+1
0003fb 81a4      	LDD  R26,Z+4
0003fc 93aa      	ST   -Y,R26
0003fd d1a7      	RCALL SUBOPT_0x12
0003fe c0c8      	RJMP _0x2020030
                 _0x202002F:
0003ff 37e3      	CPI  R30,LOW(0x73)
000400 f429      	BRNE _0x2020032
000401 d19d      	RCALL SUBOPT_0x11
000402 d1a8      	RCALL SUBOPT_0x13
000403 d101      	RCALL _strlen
000404 2f1e      	MOV  R17,R30
000405 c007      	RJMP _0x2020033
                 _0x2020032:
000406 37e0      	CPI  R30,LOW(0x70)
000407 f449      	BRNE _0x2020035
000408 d196      	RCALL SUBOPT_0x11
000409 d1a1      	RCALL SUBOPT_0x13
00040a d106      	RCALL _strlenf
00040b 2f1e      	MOV  R17,R30
00040c 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00040d 6002      	ORI  R16,LOW(2)
00040e 770f      	ANDI R16,LOW(127)
00040f e030      	LDI  R19,LOW(0)
000410 c03a      	RJMP _0x2020036
                 _0x2020035:
000411 36e4      	CPI  R30,LOW(0x64)
000412 f011      	BREQ _0x2020039
000413 36e9      	CPI  R30,LOW(0x69)
000414 f411      	BRNE _0x202003A
                 _0x2020039:
000415 6004      	ORI  R16,LOW(4)
000416 c002      	RJMP _0x202003B
                 _0x202003A:
000417 37e5      	CPI  R30,LOW(0x75)
000418 f431      	BRNE _0x202003C
                 _0x202003B:
000419 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00041a e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00041b 83ee      	STD  Y+6,R30
00041c 83ff      	STD  Y+6+1,R31
00041d e015      	LDI  R17,LOW(5)
00041e c00c      	RJMP _0x202003D
                 _0x202003C:
00041f 35e8      	CPI  R30,LOW(0x58)
000420 f411      	BRNE _0x202003F
000421 6008      	ORI  R16,LOW(8)
000422 c003      	RJMP _0x2020040
                 _0x202003F:
000423 37e8      	CPI  R30,LOW(0x78)
000424 f009      	BREQ PC+2
000425 c0a1      	RJMP _0x2020071
                 _0x2020040:
000426 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000427 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000428 83ee      	STD  Y+6,R30
000429 83ff      	STD  Y+6+1,R31
00042a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00042b ff02      	SBRS R16,2
00042c c015      	RJMP _0x2020042
00042d d171      	RCALL SUBOPT_0x11
00042e 89a8      	LDD  R26,Y+16
00042f 89b9      	LDD  R27,Y+16+1
000430 9614      	ADIW R26,4
000431 91ed      	LD   R30,X+
000432 91fd      	LD   R31,X+
000433 87ea      	STD  Y+10,R30
000434 87fb      	STD  Y+10+1,R31
000435 85ab      	LDD  R26,Y+11
000436 23aa      	TST  R26
000437 f422      	BRPL _0x2020043
000438 d18a      	RCALL __ANEGW1
000439 87ea      	STD  Y+10,R30
00043a 87fb      	STD  Y+10+1,R31
00043b e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00043c 3040      	CPI  R20,0
00043d f011      	BREQ _0x2020044
00043e 5f1f      	SUBI R17,-LOW(1)
00043f c001      	RJMP _0x2020045
                 _0x2020044:
000440 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000441 c009      	RJMP _0x2020046
                 _0x2020042:
000442 d15c      	RCALL SUBOPT_0x11
000443 89a8      	LDD  R26,Y+16
000444 89b9      	LDD  R27,Y+16+1
000445 9614      	ADIW R26,4
                +
000446 91ed     +LD R30 , X +
000447 91fc     +LD R31 , X
000448 9711     +SBIW R26 , 1
                 	__GETW1P
000449 87ea      	STD  Y+10,R30
00044a 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
00044b fd00      	SBRC R16,0
00044c c010      	RJMP _0x2020047
                 _0x2020048:
00044d 1715      	CP   R17,R21
00044e f470      	BRSH _0x202004A
00044f ff07      	SBRS R16,7
000450 c008      	RJMP _0x202004B
000451 ff02      	SBRS R16,2
000452 c004      	RJMP _0x202004C
000453 7f0b      	ANDI R16,LOW(251)
000454 2f24      	MOV  R18,R20
000455 5011      	SUBI R17,LOW(1)
000456 c001      	RJMP _0x202004D
                 _0x202004C:
000457 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000458 c001      	RJMP _0x202004E
                 _0x202004B:
000459 e220      	LDI  R18,LOW(32)
                 _0x202004E:
00045a d13d      	RCALL SUBOPT_0x10
00045b 5051      	SUBI R21,LOW(1)
00045c cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00045d 2f31      	MOV  R19,R17
00045e ff01      	SBRS R16,1
00045f c016      	RJMP _0x202004F
                 _0x2020050:
000460 3030      	CPI  R19,0
000461 f099      	BREQ _0x2020052
000462 ff03      	SBRS R16,3
000463 c006      	RJMP _0x2020053
000464 81ee      	LDD  R30,Y+6
000465 81ff      	LDD  R31,Y+6+1
000466 9125      	LPM  R18,Z+
000467 83ee      	STD  Y+6,R30
000468 83ff      	STD  Y+6+1,R31
000469 c005      	RJMP _0x2020054
                 _0x2020053:
00046a 81ae      	LDD  R26,Y+6
00046b 81bf      	LDD  R27,Y+6+1
00046c 912d      	LD   R18,X+
00046d 83ae      	STD  Y+6,R26
00046e 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00046f d128      	RCALL SUBOPT_0x10
000470 3050      	CPI  R21,0
000471 f009      	BREQ _0x2020055
000472 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000473 5031      	SUBI R19,LOW(1)
000474 cfeb      	RJMP _0x2020050
                 _0x2020052:
000475 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000476 e320      	LDI  R18,LOW(48)
000477 81ee      	LDD  R30,Y+6
000478 81ff      	LDD  R31,Y+6+1
000479 d14d      	RCALL __GETW1PF
00047a 87e8      	STD  Y+8,R30
00047b 87f9      	STD  Y+8+1,R31
00047c 81ee      	LDD  R30,Y+6
00047d 81ff      	LDD  R31,Y+6+1
00047e 9632      	ADIW R30,2
00047f 83ee      	STD  Y+6,R30
000480 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000481 85e8      	LDD  R30,Y+8
000482 85f9      	LDD  R31,Y+8+1
000483 85aa      	LDD  R26,Y+10
000484 85bb      	LDD  R27,Y+10+1
000485 17ae      	CP   R26,R30
000486 07bf      	CPC  R27,R31
000487 f050      	BRLO _0x202005C
000488 5f2f      	SUBI R18,-LOW(1)
000489 85a8      	LDD  R26,Y+8
00048a 85b9      	LDD  R27,Y+8+1
00048b 85ea      	LDD  R30,Y+10
00048c 85fb      	LDD  R31,Y+10+1
00048d 1bea      	SUB  R30,R26
00048e 0bfb      	SBC  R31,R27
00048f 87ea      	STD  Y+10,R30
000490 87fb      	STD  Y+10+1,R31
000491 cfef      	RJMP _0x202005A
                 _0x202005C:
000492 332a      	CPI  R18,58
000493 f028      	BRLO _0x202005D
000494 ff03      	SBRS R16,3
000495 c002      	RJMP _0x202005E
000496 5f29      	SUBI R18,-LOW(7)
000497 c001      	RJMP _0x202005F
                 _0x202005E:
000498 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000499 fd04      	SBRC R16,4
00049a c019      	RJMP _0x2020061
00049b 3321      	CPI  R18,49
00049c f420      	BRSH _0x2020063
00049d 85a8      	LDD  R26,Y+8
00049e 85b9      	LDD  R27,Y+8+1
00049f 9711      	SBIW R26,1
0004a0 f409      	BRNE _0x2020062
                 _0x2020063:
0004a1 c009      	RJMP _0x20200CD
                 _0x2020062:
0004a2 1753      	CP   R21,R19
0004a3 f010      	BRLO _0x2020067
0004a4 ff00      	SBRS R16,0
0004a5 c001      	RJMP _0x2020068
                 _0x2020067:
0004a6 c011      	RJMP _0x2020066
                 _0x2020068:
0004a7 e220      	LDI  R18,LOW(32)
0004a8 ff07      	SBRS R16,7
0004a9 c00a      	RJMP _0x2020069
0004aa e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0004ab 6100      	ORI  R16,LOW(16)
0004ac ff02      	SBRS R16,2
0004ad c006      	RJMP _0x202006A
0004ae 7f0b      	ANDI R16,LOW(251)
0004af 934a      	ST   -Y,R20
0004b0 d0f4      	RCALL SUBOPT_0x12
0004b1 3050      	CPI  R21,0
0004b2 f009      	BREQ _0x202006B
0004b3 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004b4 d0e3      	RCALL SUBOPT_0x10
0004b5 3050      	CPI  R21,0
0004b6 f009      	BREQ _0x202006C
0004b7 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004b8 5031      	SUBI R19,LOW(1)
0004b9 85a8      	LDD  R26,Y+8
0004ba 85b9      	LDD  R27,Y+8+1
0004bb 9712      	SBIW R26,2
0004bc f008      	BRLO _0x2020059
0004bd cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004be ff00      	SBRS R16,0
0004bf c007      	RJMP _0x202006D
                 _0x202006E:
0004c0 3050      	CPI  R21,0
0004c1 f029      	BREQ _0x2020070
0004c2 5051      	SUBI R21,LOW(1)
0004c3 e2e0      	LDI  R30,LOW(32)
0004c4 93ea      	ST   -Y,R30
0004c5 d0df      	RCALL SUBOPT_0x12
0004c6 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004c7 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004c8 ceea      	RJMP _0x2020016
                 _0x2020018:
0004c9 85ac      	LDD  R26,Y+12
0004ca 85bd      	LDD  R27,Y+12+1
0004cb 91ed      	LD   R30,X+
0004cc 91fd      	LD   R31,X+
0004cd d0ee      	RCALL __LOADLOCR6
0004ce 9664      	ADIW R28,20
0004cf 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
0004d0 d0e6      	RCALL __SAVELOCR4
0004d1 018d      	MOVW R16,R26
0004d2 813c      	LDD  R19,Y+4
0004d3 2fa3      	MOV  R26,R19
0004d4 de89      	RCALL _lcd_putchar
0004d5 01d8      	MOVW R26,R16
0004d6 91ed      	LD   R30,X+
0004d7 91fd      	LD   R31,X+
0004d8 9631      	ADIW R30,1
0004d9 93fe      	ST   -X,R31
0004da 93ee      	ST   -X,R30
0004db d0e2      	RCALL __LOADLOCR4
0004dc 9625      	ADIW R28,5
0004dd 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
0004de 92ff      	PUSH R15
0004df 2ef8      	MOV  R15,R24
0004e0 9726      	SBIW R28,6
0004e1 931a      	ST   -Y,R17
0004e2 930a      	ST   -Y,R16
0004e3 01de      	MOVW R26,R28
0004e4 9614      	ADIW R26,4
                +
0004e5 2400     +CLR R0
0004e6 0daf     +ADD R26 , R15
0004e7 1db0     +ADC R27 , R0
                 	__ADDW2R15
0004e8 018d      	MOVW R16,R26
0004e9 e0e0      	LDI  R30,LOW(0)
0004ea 83ec      	STD  Y+4,R30
0004eb 83ed      	STD  Y+4+1,R30
0004ec 83ee      	STD  Y+6,R30
0004ed 83ef      	STD  Y+6+1,R30
0004ee 01de      	MOVW R26,R28
0004ef 9618      	ADIW R26,8
                +
0004f0 2400     +CLR R0
0004f1 0daf     +ADD R26 , R15
0004f2 1db0     +ADC R27 , R0
                 	__ADDW2R15
0004f3 91ed      	LD   R30,X+
0004f4 91fd      	LD   R31,X+
0004f5 93fa      	ST   -Y,R31
0004f6 93ea      	ST   -Y,R30
0004f7 931a      	ST   -Y,R17
0004f8 930a      	ST   -Y,R16
0004f9 ede0      	LDI  R30,LOW(_put_lcd_G101)
0004fa e0f4      	LDI  R31,HIGH(_put_lcd_G101)
0004fb 93fa      	ST   -Y,R31
0004fc 93ea      	ST   -Y,R30
0004fd 01de      	MOVW R26,R28
0004fe 9618      	ADIW R26,8
0004ff dea8      	RCALL __print_G101
000500 8119      	LDD  R17,Y+1
000501 8108      	LDD  R16,Y+0
000502 9628      	ADIW R28,8
000503 90ff      	POP  R15
000504 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000505 93ba      	ST   -Y,R27
000506 93aa      	ST   -Y,R26
000507 91a9          ld   r26,y+
000508 91b9          ld   r27,y+
000509 27ee          clr  r30
00050a 27ff          clr  r31
                 strlen0:
00050b 916d          ld   r22,x+
00050c 2366          tst  r22
00050d f011          breq strlen1
00050e 9631          adiw r30,1
00050f cffb          rjmp strlen0
                 strlen1:
000510 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000511 93ba      	ST   -Y,R27
000512 93aa      	ST   -Y,R26
000513 27aa          clr  r26
000514 27bb          clr  r27
000515 91e9          ld   r30,y+
000516 91f9          ld   r31,y+
                 strlenf0:
000517 9005      	lpm  r0,z+
000518 2000          tst  r0
000519 f011          breq strlenf1
00051a 9611          adiw r26,1
00051b cffb          rjmp strlenf0
                 strlenf1:
00051c 01fd          movw r30,r26
00051d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _flagID:
000160           	.BYTE 0x1
                 _flagPC:
000161           	.BYTE 0x1
                 __base_y_G100:
000162           	.BYTE 0x4
                 __lcd_x:
000166           	.BYTE 0x1
                 __lcd_y:
000167           	.BYTE 0x1
                 __lcd_maxx:
000168           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:98 WORDS
                 SUBOPT_0x0:
00051e 93fa      	ST   -Y,R31
00051f 93ea      	ST   -Y,R30
000520 e080      	LDI  R24,0
000521 dfbc      	RCALL _lcd_printf
000522 9622      	ADIW R28,2
000523 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000524 9722      	SBIW R28,2
000525 e0e0      	LDI  R30,LOW(0)
000526 83e8      	ST   Y,R30
000527 83e9      	STD  Y+1,R30
000528 de29      	RCALL _lcd_clear
                +
000529 e9e6     +LDI R30 , LOW ( 2 * _0x0 + ( 26 ) )
00052a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW1FN _0x0,26
00052b cff2      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00052c dcbf      	RCALL _keypad
00052d e0f0      	LDI  R31,0
00052e 83e8      	ST   Y,R30
00052f 83f9      	STD  Y+1,R31
000530 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3:
                +
000531 eae8     +LDI R30 , LOW ( 2 * _0x0 + ( 44 ) )
000532 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW1FN _0x0,44
000533 93fa      	ST   -Y,R31
000534 93ea      	ST   -Y,R30
000535 81ea      	LDD  R30,Y+2
000536 81fb      	LDD  R31,Y+2+1
                +
000537 2f6f     +MOV R22 , R31
000538 0f66     +ADD R22 , R22
000539 0b66     +SBC R22 , R22
00053a 2f76     +MOV R23 , R22
                 	__CWD1
00053b d08f      	RCALL __PUTPARD1
00053c e084      	LDI  R24,4
00053d dfa0      	RCALL _lcd_printf
00053e 9626      	ADIW R28,6
00053f 2de9      	MOV  R30,R9
000540 e0aa      	LDI  R26,LOW(10)
000541 02ea      	MULS R30,R26
000542 01f0      	MOVW R30,R0
000543 81a8      	LD   R26,Y
000544 0fea      	ADD  R30,R26
000545 2e9e      	MOV  R9,R30
000546 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x4:
000547 de0a      	RCALL _lcd_clear
000548 e0e0      	LDI  R30,LOW(0)
000549 93e0 0160 	STS  _flagID,R30
00054b 2da9      	MOV  R26,R9
00054c dd15      	RCALL _get_address_id
00054d 93e0 0160 	STS  _flagID,R30
00054f 30e0      	CPI  R30,0
000550 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000551 2de8      	MOV  R30,R8
000552 e0aa      	LDI  R26,LOW(10)
000553 02ea      	MULS R30,R26
000554 01f0      	MOVW R30,R0
000555 81a8      	LD   R26,Y
000556 0fea      	ADD  R30,R26
000557 2e8e      	MOV  R8,R30
000558 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000559 e0e0      	LDI  R30,LOW(0)
00055a 93e0 0161 	STS  _flagPC,R30
00055c 2da8      	MOV  R26,R8
00055d dd15      	RCALL _get_address_pc
00055e 93e0 0161 	STS  _flagPC,R30
000560 e0f0      	LDI  R31,0
000561 9731      	SBIW R30,1
000562 91a0 0160 	LDS  R26,_flagID
000564 e0b0      	LDI  R27,0
000565 17ea      	CP   R30,R26
000566 07fb      	CPC  R31,R27
000567 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000568 dde9      	RCALL _lcd_clear
                +
000569 efe0     +LDI R30 , LOW ( 2 * _0x0 + ( 116 ) )
00056a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 116 ) )
                 	__POINTW1FN _0x0,116
00056b cfb2      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00056c 2deb      	MOV  R30,R11
00056d e0aa      	LDI  R26,LOW(10)
00056e 02ea      	MULS R30,R26
00056f 01f0      	MOVW R30,R0
000570 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000571 93fa      	ST   -Y,R31
000572 93ea      	ST   -Y,R30
000573 2dab      	MOV  R26,R11
000574 dcdf      	RCALL _EE_Write
000575 dddc      	RCALL _lcd_clear
                +
000576 e1e5     +LDI R30 , LOW ( 2 * _0x0 + ( 153 ) )
000577 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 153 ) )
                 	__POINTW1FN _0x0,153
000578 cfa5      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000579 931a      	ST   -Y,R17
00057a 930a      	ST   -Y,R16
00057b 2f0a      	MOV  R16,R26
00057c e010      	LDI  R17,0
00057d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
00057e dc6d      	RCALL _keypad
00057f 2e4e      	MOV  R4,R30
000580 2455      	CLR  R5
                +
000581 ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 69 ) )
000582 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW1FN _0x0,69
000583 cf9a      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000584 e0aa      	LDI  R26,LOW(10)
000585 02ea      	MULS R30,R26
000586 01f0      	MOVW R30,R0
000587 0de4      	ADD  R30,R4
000588 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000589 ddc8      	RCALL _lcd_clear
                +
00058a ecec     +LDI R30 , LOW ( 2 * _0x0 + ( 336 ) )
00058b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 336 ) )
                 	__POINTW1FN _0x0,336
00058c cf91      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00058d dda3      	RCALL __lcd_write_data
00058e e0a3      	LDI  R26,LOW(3)
00058f e0b0      	LDI  R27,0
000590 c03f      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xF:
000591 e3a0      	LDI  R26,LOW(48)
000592 dd89      	RCALL __lcd_write_nibble_G100
                +
000593 ec88     +LDI R24 , LOW ( 200 )
000594 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000595 9701     +SBIW R24 , 1
000596 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000597 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x10:
000598 932a      	ST   -Y,R18
000599 85ad      	LDD  R26,Y+13
00059a 85be      	LDD  R27,Y+13+1
00059b 85ef      	LDD  R30,Y+15
00059c 89f8      	LDD  R31,Y+15+1
00059d 9509      	ICALL
00059e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x11:
00059f 89e8      	LDD  R30,Y+16
0005a0 89f9      	LDD  R31,Y+16+1
0005a1 9734      	SBIW R30,4
0005a2 8be8      	STD  Y+16,R30
0005a3 8bf9      	STD  Y+16+1,R31
0005a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
0005a5 85ad      	LDD  R26,Y+13
0005a6 85be      	LDD  R27,Y+13+1
0005a7 85ef      	LDD  R30,Y+15
0005a8 89f8      	LDD  R31,Y+15+1
0005a9 9509      	ICALL
0005aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
0005ab 89a8      	LDD  R26,Y+16
0005ac 89b9      	LDD  R27,Y+16+1
0005ad 9614      	ADIW R26,4
0005ae 91ed      	LD   R30,X+
0005af 91fd      	LD   R31,X+
0005b0 83ee      	STD  Y+6,R30
0005b1 83ff      	STD  Y+6+1,R31
0005b2 81ae      	LDD  R26,Y+6
0005b3 81bf      	LDD  R27,Y+6+1
0005b4 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0005b5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005b6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005b7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005b8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005b9 931a      	ST   -Y,R17
0005ba 930a      	ST   -Y,R16
0005bb 9508      	RET
                 
                 __LOADLOCR6:
0005bc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005bd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005be 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005bf 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005c0 8119      	LDD  R17,Y+1
0005c1 8108      	LD   R16,Y
0005c2 9508      	RET
                 
                 __ANEGW1:
0005c3 95f1      	NEG  R31
0005c4 95e1      	NEG  R30
0005c5 40f0      	SBCI R31,0
0005c6 9508      	RET
                 
                 __GETW1PF:
0005c7 9005      	LPM  R0,Z+
0005c8 91f4      	LPM  R31,Z
0005c9 2de0      	MOV  R30,R0
0005ca 9508      	RET
                 
                 __PUTPARD1:
0005cb 937a      	ST   -Y,R23
0005cc 936a      	ST   -Y,R22
0005cd 93fa      	ST   -Y,R31
0005ce 93ea      	ST   -Y,R30
0005cf 9508      	RET
                 
                 _delay_ms:
0005d0 9610      	adiw r26,0
0005d1 f039      	breq __delay_ms1
                 __delay_ms0:
0005d2 95a8      	wdr
                +
0005d3 ed80     +LDI R24 , LOW ( 0x7D0 )
0005d4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005d5 9701     +SBIW R24 , 1
0005d6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005d7 9711      	sbiw r26,1
0005d8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005d9 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  20 r1 :   3 r2 :   0 r3 :   0 r4 :   6 r5 :   3 r6 :   3 r7 :  39 
r8 :  10 r9 :   9 r10:   4 r11:   7 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  47 r17:  58 r18:  29 r19:  12 r20:   9 r21:  17 r22:  19 r23:   5 
r24:  28 r25:   7 r26: 120 r27:  41 r28:  18 r29:   1 r30: 292 r31:  96 
x  :  21 y  : 186 z  :  14 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :  12 
adiw  :  24 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   0 brne  :  52 brpl  :   1 brsh  :  12 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  34 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  23 cpc   :   4 cpi   :  48 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  10 inc   :  14 jmp   :  22 ld    :  42 ldd   :  63 ldi   : 192 
lds   :   8 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  56 movw  :  17 
mul   :   1 muls  :   5 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   9 out   :  19 pop   :   1 push  :   1 rcall : 150 ret   :  44 
reti  :   1 rjmp  : 114 rol   :   0 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  16 sbic  :   2 sbis  :  12 sbiw  :  16 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  72 std   :  32 sts   :  13 sub   :   1 subi  :  18 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bb4   2590    406   2996   16384  18.3%
[.dseg] 0x000060 0x000169      0      9      9    1024   0.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 16 warnings
